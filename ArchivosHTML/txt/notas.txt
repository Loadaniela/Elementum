 <div class="card">
                        <div class="face front">
                            <img src="Imagenes/oncahui.png" alt="">
                            <h3>Autor</h3>
                        </div>
                        
                        <div class="face back">
                            <h3>Daniela Loa Salinas</h3>
                            <p aling="justify">Soy estudiante de la licenciatura en Tecnologias y Sistemas de Información, de la Unversidad Autonoma Mteropolitana Unidad Cuajimalpa, generación 
                                2020.
                            </p>
                            <p aling="justify">
                                Te presento mi proyecto terminal, **Elementum**, una plataforma de juegos educativos web diseñada para reforzar los conocimientos de química adquiridos en clase.
                                 Esta plataforma está dirigida a estudiantes que deseen aprender más sobre los elementos de la tabla periódica. En Elementum, encontrarán diversos juegos que abarcan temas
                                  como los bloques en los que se divide la tabla periódica, la ubicación de los elementos, así como sus radios atómicos y electronegatividades.
                              </p>
                              
                        
                        <div class="link">
                            <a href="loadaniela2@gmail.com" target="_blank" style="color: rgb(255, 60, 0);">Correo Electronico</a>
                        </div>
                        </div></div>
    
    
    
                        <div class="card">
                            <div class="face front">
                                <img src="Imagenes/fuentes.jpg" alt="">
                                    <h3>Fuentes</h3>
                            </div>
                                
                            <div class="face back">
                                <h3>Fuentes de Elementum</h3>
                                <p>
                                    Bibliografía del documento escrito del proyecto terminal de Daniela Loa Salinas: <a href="https://docs.google.com/document/d/16uEXcrZmVbPiMCSI4qvDamG2N7knhkHK/edit?usp=sharing&ouid=105418930439442311903&rtpof=true&sd=true" target="_blank">PDF</a><br>
                                    Fuente de referencia sobre la posición de los elementos en la tabla periódica: <a href="https://ptable.com/?lang=es#Propiedades" target="_blank">Tabla Periódica</a><br>
                                    Fuente de información sobre los elementos y su radio atómico: <a href="https://www.lifeder.com/radio-atomico/" target="_blank">Radio</a><br>
                                    Fuente de información sobre la electronegatividad de los elementos: <a href="https://www.lifeder.com/electronegatividad/" target="_blank">Datos</a><br>
                                    Fuente de imágenes utilizadas en Elementum: <a href="https://www.shutterstock.com/es/explore/mexico-stock-assets-0222?&cr=ec&ds_ag=Images-Bank&ds_agid=58700003945715212&ds_cid=71700000034280538&ds_eid=700000001393952&gclid=528f386f5de11c96eacb5eb03413c779&gclsrc=3p.ds&kw=banco%20de%20fotos&msclkid=528f386f5de11c96eacb5eb03413c779&pl=PPC_BNG_MX_IG-&utm_campaign=CO%3DMX_LG%3DES_BU%3DIMG_AD%3DGENERIC_TS%3Dlggeneric_RG%3DAMER_AB%3DACQ_CH%3DSEM_OG%3DCONV_PB%3DMicrosoft-Ads&utm_campaign=CO%3DMX_LG%3DES_BU%3DIMG_AD%3DGENERIC_TS%3Dlggeneric_RG%3DAMER_AB%3DACQ_CH%3DSEM_OG%3DCONV_PB%3DMicrosoft-Ads&utm_content=Images-Bank&utm_medium=cpc&utm_medium=cpc&utm_source=MICROSOFT&utm_source=bing&utm_term=banco%20de%20fotos" target="_blank">Imágenes</a><br>
                                    Fuente de audios utilizados en Elementum: <a href="https://pixabay.com/es/sound-effects/" target="_blank">Audios</a><br>
                                    Fuentes adicionales: <a href="#">Extra</a>, <a href="#">Extra2</a>.
                                  </p>
                                  
                            <div class="link">
                                <a href="#"></a>
                            </div>
                        </div>
                        </div>
                    
    
    
                    <div class="card">
                        <div class="face front">
                            <img src="Imagenes/uam.jpg" alt="">
                            <h3>Asesores e Instución</h3>
                        </div>
                        
                        <div class="face back">
                            <h3>Univerisdad Autónoma Mteropolitana</h3>
                            <p style="text-align: justify;"> Proyecto Terminal de la UAM plantel Cuajimalpa Vasco de Quiroga 4871, Contadero, Cuajimalpa de Morelos, 05348 Ciudad de México, CDMX.<br><br><br> 
                                Asesores encargados a este proyecto; <strong>Mc. Jorge Matadamas Hernandez</strong> y <strong>Dr. Carlos Roberto Jaimez González</strong><br><br>
                                Agradezco sus consejos y asesorias de gran ayuda hacía mi proyecto. 

                                </p>
                        
                        <div class="link">
                            <a href="https://www.cua.uam.mx/" target="_blank" style="color: rgb(255, 60, 0);">UAM CUAJIMALPA</a>
                        </div>
                        </div></div>


    en juego 4 quite esto 
    <!-- EL ESCRIP CORRECTO POR SI NO FUNCIONA
<script>
    let contadorArrastres = 0; // Cuenta todos los arrastres (correctos e incorrectos)
    let elementosColocadosCorrectamente = 0; // Cuenta solo los elementos colocados correctamente
    const totalElementos = 10; // Total de elementos que se deben colocar correctamente
    

    // Carga de los sonidos de acierto y error
    const sonidoAcierto = new Audio('audio/acierto.mp3'); // Ruta al archivo de sonido de acierto
    const sonidoError = new Audio('audio/error.mp3'); // Ruta al archivo de sonido de error

    function allowDrop(event) {
        event.preventDefault();
    }

    function drag(event) {
    const elemento = event.target;
    const nombreElemento = elemento.querySelector('.nombre').textContent.trim();
    const simboloElemento = elemento.querySelector('.simbolo').textContent.trim(); // Obtén el símbolo
    event.dataTransfer.setData('nombreElemento', nombreElemento);
    event.dataTransfer.setData('simboloElemento', simboloElemento); // Guárdalo en el dataTransfer
    event.dataTransfer.setData('elementoId', elemento.id);
}

function drop(event) {
    event.preventDefault();
    contadorArrastres++; // Incrementa el contador de arrastres totales en cada intento

    const nombreElemento = event.dataTransfer.getData('nombreElemento');
    const simboloElemento = event.dataTransfer.getData('simboloElemento'); //símbolo almacenado en el drag
    const dropTarget = event.currentTarget;
    const nombreCelda = dropTarget.getAttribute('data-nombre').trim();

    console.log(`Comparando: ${nombreElemento} con ${nombreCelda}`);

    if (nombreElemento.toLowerCase() === nombreCelda.toLowerCase()) {
        const elementoId = event.dataTransfer.getData('elementoId');
        const elemento = document.getElementById(elementoId);
        dropTarget.appendChild(elemento);
        elemento.style.position = 'relative';
        elemento.style.left = '0';
        elemento.style.top = '0';
        elemento.classList.add('colocado');
        elemento.setAttribute('draggable', 'false'); // Deshabilita el arrastre
        elemento.removeEventListener('dragstart', drag); // Remueve el evento de arrastre
        
        elementosColocadosCorrectamente++; // Incrementa el contador de elementos colocados correctamente
        sonidoAcierto.play(); // Reproduce el sonido de acierto

        //  fetch para obtener la pregunta usando el símbolo
        fetch(`/get-question/${simboloElemento}`)
            .then(response => response.json())
            .then(data => {
                if (data.question) {
                    // pregunta y opciones de verdadero o falso
                    Swal.fire({
                        title: `Pregunta para ${nombreElemento}`,
                        text: data.question,
                        icon: 'info',
                        showDenyButton: true,
                        confirmButtonText: 'Verdadero',
                        denyButtonText: 'Falso',
                    }).then((result) => {
                        let esCorrecto = data.correctAnswer; // Obtiene el boleano del resultado correcto que esta amacenado en question como correctAnswer

                        // Evaluar la respuesta del usuario
                        if ((result.isConfirmed && esCorrecto) || (result.isDenied && !esCorrecto)) {
                            Swal.fire({
                                title: '¡Correcto!',
                                text: 'Has respondido correctamente.',
                                icon: 'success',
                                confirmButtonText: 'Aceptar'
                            });
                        } else {
                            Swal.fire({
                                title: 'Incorrecto',
                                text: `La respuesta correcta era: ${esCorrecto ? 'Verdadero' : 'Falso'}`,
                                icon: 'error',
                                confirmButtonText: 'Aceptar'
                            });
                        }
                    });
                } else {
                    console.error('No se encontró una pregunta para el símbolo:', simboloElemento); //en caso de erro, pero si no hay pregunta no le manda nada
                }
            })
            .catch(error => console.error('Error al obtener la pregunta:', error));
        
    } else {
        sonidoError.play(); // Reproduce el sonido de error
    }


        // Actualiza el contador de arrastres en el DOM
        document.getElementById('contadorArrastres').textContent = contadorArrastres;

        // Verifica si todos los elementos han sido colocados correctamente
        if (elementosColocadosCorrectamente === totalElementos) {
            Swal.fire({
                title: '¡Felicidades!',
                text: `Has colocado todos los elementos correctamente en ${contadorArrastres} arrastres.`,
                icon: 'success',
                confirmButtonText: 'Aceptar'
            }).then(() => {
                // Guarda el resultado del juego en la base de datos
                const userId = document.getElementById('usuario').textContent; // Obtiene el userId del perfil cargado
                const juegoId = obtenerIdJuegoDeURL(); // Obtiene el ID del juego actual

                guardarResultadoJuego(userId, juegoId, contadorArrastres);
            });
        }
    }

    // Función para guardar el resultado del juego
    function guardarResultadoJuego(userId, juegoId, numArrastres) {
        const nombreJuego = obtenerNombreJuego(juegoId);

        fetch('/guardar-resultado', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId, juegoId, numArrastres })
        })
        .then(response => response.json())
        .then(data => {
            console.log('Resultado guardado:', data);

            if (data.message === 'Resultado guardado correctamente') {
                // Redirige a marcador.html
                window.location.href = 'marcador.html';
            } else {
                Swal.fire({
                    title: 'Error',
                    text: 'Error al guardar resultados: ' + (data.error || 'Error desconocido'),
                    icon: 'error',
                    confirmButtonText: 'Aceptar'
                });
                console.error('Detalles del error:', data);
            }
        })
        .catch(error => {
            console.error('Error de red:', error);
            Swal.fire({
                title: 'Error de red',
                text: 'Por favor, intenta nuevamente.',
                icon: 'error',
                confirmButtonText: 'Aceptar'
            });
        });
    }

    // Función para obtener el nombre del juego basado en el ID
    function obtenerNombreJuego(juegoId) {
        switch (parseInt(juegoId)) {
            case 1: return 'Bloques';
            case 2: return 'Elementos';
            case 3: return 'RadioA';
            case 4: return 'Electronegatividad';
            default: return 'Juego desconocido';
        }
    }
</script>


<script>
    // Función para obtener preguntas aleatorias de todos los elementos
    function obtenerPreguntasAleatorias() {
        fetch('/preguntas-aleatorias')
            .then(response => response.json())
            .then(data => {
                const mensaje = document.getElementById('mensaje');
                if (data.success) {
                    // Limpia el contenido previo
                    mensaje.innerHTML = '';

                    // Recorre las preguntas y las imprime en el DOM
                    data.preguntas.forEach(pregunta => {
                        const parrafoPregunta = document.createElement('p');
                        parrafoPregunta.textContent = `Pregunta del elemento ${pregunta.elementSymbol}: ${pregunta.question}`;
                        mensaje.appendChild(parrafoPregunta);
                    });
                } else {
                    mensaje.textContent = 'No se encontraron preguntas.';
                    mensaje.style.color = 'red';
                }
            })
            .catch(error => {
                console.error('Error al obtener las preguntas:', error);
                document.getElementById('mensaje').textContent = 'Error al obtener las preguntas.';
            });
    }

    // Llama a la función para obtener preguntas aleatorias
    obtenerPreguntasAleatorias();
</script>
-->